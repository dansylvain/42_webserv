	// map<string, timespec> _lastDir_M_Time;
	// map<string, timespec> _lastDir_C_Time;

/**
 * @brief This function extracts two timestamps from `stat`
 * `st_ctim` and `st_mtim` and store them in a map.
 * 
 * @return true 
 * @return false 
 */
bool ResponseBuilder::isDirectoryUnchanged( void ){

	// Current TimeStamps
	timespec cur_M_Time;
	timespec cur_C_Time;

	// Stored Timestamps
	timespec last_M_Time;
	timespec last_C_Time;

	// Extract data of the Directory
	stat(_realURI.c_str(), &_fileInfo);
	cur_M_Time = _fileInfo.st_ctim;
	cur_C_Time = _fileInfo.st_mtim;
	
	// Check for new entries by raising a std::out_of_bounds exception
	try
	{
		last_M_Time = _lastDir_M_Time.at(_realURI);
		last_C_Time = _lastDir_C_Time.at(_realURI);
	}
	catch(const std::exception& e)
	{
		_lastDir_M_Time.insert(std::make_pair(_realURI, cur_M_Time));
		_lastDir_C_Time.insert(std::make_pair(_realURI, cur_C_Time));
		return true;
	}

	// If any of the timestamp does not match, it means that target has been modified
	if ((cur_C_Time.tv_nsec != last_C_Time.tv_nsec) or (cur_C_Time.tv_sec != last_C_Time.tv_sec) or
		(cur_M_Time.tv_nsec != last_M_Time.tv_nsec) or (cur_M_Time.tv_sec != last_M_Time.tv_sec))
	{
		_lastDir_M_Time[_realURI] = cur_M_Time;
		_lastDir_C_Time[_realURI] = cur_C_Time;
		return false;
	}
	
	return true;
}